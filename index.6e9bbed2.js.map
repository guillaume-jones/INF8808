{"mappings":"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","sources":["node_modules/point-in-polygon/flat.js","src/scripts/geography.js","src/scripts/preprocess.js","src/scripts/mapViz.js","src/scripts/dropdown.js","src/scripts/clickHandlers.js","src/scripts/lineChart.js","src/scripts/areaChart.js","node_modules/point-in-polygon/index.js","node_modules/point-in-polygon/nested.js","src/scripts/barChartViz.js","src/index.js"],"sourcesContent":["module.exports = function pointInPolygonFlat (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = (end-start)/2;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[start+i*2+0], yi = vs[start+i*2+1];\n        var xj = vs[start+j*2+0], yj = vs[start+j*2+1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n","import pointInPolygon from 'point-in-polygon';\r\n\r\n/** Gets the Montreal geographical data\r\n *\r\n * @returns {object[]} Montreal GEOJSON\r\n */\r\nexport async function getMontrealData() {\r\n  return await d3.json('montreal.json');\r\n}\r\n\r\n/** Gets the Montreal geographical data\r\n *\r\n * @returns {object[]} Montreal's bike path GEOJSON\r\n */\r\nexport async function getBikePaths() {\r\n  return await d3.json('reseau_cyclable.geojson');\r\n}\r\n\r\n/**\r\n * Determines the neighborhood based on coordinates\r\n *\r\n * @param lon Longitude of point (float)\r\n * @param lat Latitude of point (float)\r\n * @param montreal Pre-loaded JSON of Montreal data\r\n *\r\n * @returns {string} Neighborhood of point or empty if not found\r\n */\r\nexport function determineNeighborhood(lon, lat, montreal) {\r\n  let returnName = '';\r\n\r\n  montreal.forEach((feature) => {\r\n    if (pointInPolygon([lon, lat], feature.geometry.coordinates[0][0])) {\r\n      returnName = feature.properties.NOM;\r\n    }\r\n  });\r\n\r\n  return returnName;\r\n}\r\n\r\n/** Gets the map projection function\r\n *\r\n * @returns Projection function in Mercator for Montreal\r\n */\r\nexport function getProjection() {\r\n  return d3.geoMercator().center([-73.708879, 45.579611]).scale(70000);\r\n}\r\n\r\n/** Gets the path function\r\n *\r\n * @param projection Projection in Mercator for Montreal\r\n *\r\n * @returns Path function for Montreal\r\n */\r\nexport function getPath(projection) {\r\n  return d3.geoPath().projection(projection);\r\n}\r\n\r\n/** Gets the XY positions on the map viz for a given set of coordinates\r\n * @param {number} longitude Longitude to convert\r\n * @param {number} latitude Latitude to convert\r\n * @param projection Projection in Mercator for Montreal\r\n *\r\n * @returns {x: number, y: number}\r\n */\r\nexport function convertCoordinatesToXY(longitude, latitude, projection) {\r\n  const projected = projection([longitude, latitude]);\r\n  return {\r\n    x: projected[0],\r\n    y: projected[1],\r\n  };\r\n}\r\n","import { convertCoordinatesToXY, determineNeighborhood } from './geography';\r\n\r\nfunction sum(a, key = '') {\r\n  if (key) {\r\n    a = a.map((a) => a[key]);\r\n  }\r\n  return a.reduce((b, c) => b + (isNaN(c) ? 0 : c), 0);\r\n}\r\n\r\nfunction groupSum(a, key, key2) {\r\n  return a.reduce((b, c) => {\r\n    b[c[key]] = (b[c[key]] || 0) + (isNaN(c[key2]) ? 0 : c[key2]);\r\n    return b;\r\n  }, {});\r\n}\r\n\r\n/** Load counter CSVs\r\n *\r\n * @param {number[]} years Array of years to load\r\n *\r\n * @returns {object[]} Array of data by year\r\n */\r\nexport async function getCounterData(years) {\r\n  const counterData = {};\r\n  // Required due to asynchronous loop\r\n  await Promise.all(\r\n    years.map(async (year) => {\r\n      counterData[year] = await d3.csv('comptage_velo_' + year + '.csv');\r\n    }),\r\n  );\r\n\r\n  return counterData;\r\n}\r\n\r\n/** Load location CSV\r\n *\r\n * @returns {object} Location data\r\n */\r\nexport async function getLocationData() {\r\n  return await d3.csv('localisation_des_compteurs_velo.csv');\r\n}\r\n\r\n/** Convert location and counter data into usable dataset\r\n *\r\n * Filters out partial data\r\n * Harmonizes IDs and names\r\n * Organizes by year, counter name, date and time\r\n *\r\n * @param {object} locations Location data from CSV\r\n * @param {object[]} counters Counter data from CSV\r\n * @param {object} years Years of data loaded into counters\r\n *\r\n * @returns {object[]} The filtered and combined dataset\r\n */\r\nexport function createDataset(locations, counters, years) {\r\n  const dataset = {};\r\n\r\n  years.forEach((year) => {\r\n    const counterData = counters[year];\r\n    dataset[year] = {};\r\n\r\n    // Keeps only data columns\r\n    const acceptedCounters = Object.keys(counterData[0]).filter((name) => {\r\n      return name !== 'Date' && name !== '';\r\n    });\r\n\r\n    // Gets relevant data for each counter from location dataset\r\n    acceptedCounters.forEach((name) => {\r\n      const counter = locations.find((t) => {\r\n        if (name.includes('compteur')) {\r\n          // Finds via ID, for 2019-2021 datasets\r\n          return name.includes(t.ID);\r\n        } else {\r\n          // Finds via name, for 2009-2018 datasets\r\n          return t.Nom === name;\r\n        }\r\n      });\r\n\r\n      dataset[year][counter.Nom] = {\r\n        name: counter.Nom,\r\n        longitude: counter.Longitude,\r\n        latitude: counter.Latitude,\r\n        counts: [],\r\n      };\r\n    });\r\n\r\n    // Iterates through counterData to add counts to each counter\r\n    counterData.forEach((timestep) => {\r\n      let date = undefined;\r\n      let time = '00:00';\r\n\r\n      Object.entries(timestep)\r\n        .map(([key, value]) => {\r\n          if (key === 'Date') {\r\n            const dateTime = value.split(' ');\r\n            date = dateTime[0];\r\n            // Gets time as well for datasets after 2018\r\n            if (dateTime.length > 1) {\r\n              time = dateTime[1];\r\n            }\r\n          }\r\n          return [key, value];\r\n        })\r\n        .filter(([name]) => acceptedCounters.includes(name))\r\n        .forEach(([name, count]) => {\r\n          if (parseInt(year) > 2018) {\r\n            name = locations.find((t) => name.includes(t.ID)).Nom;\r\n          }\r\n          dataset[year][name].counts.push({\r\n            date: date,\r\n            time: time,\r\n            count: parseInt(count),\r\n          });\r\n        });\r\n    });\r\n  });\r\n\r\n  return dataset;\r\n}\r\n\r\n/** Generates data in format for map\r\n *\r\n * @param {object} dataset Dataset created by createDataset\r\n * @param montreal Pre-loaded JSON of Montreal data\r\n * @param projection Projection used for the map\r\n *\r\n * @returns {object} Data for Area chart\r\n */\r\nexport function createMapData(dataset, montreal, projection) {\r\n  const mapData = {};\r\n\r\n  Object.entries(dataset).forEach(([year, yearData]) => {\r\n    mapData[year] = Object.entries(yearData).map(([counter, counterData]) => {\r\n      return {\r\n        name: counter,\r\n        neighborhood: determineNeighborhood(\r\n          counterData.longitude,\r\n          counterData.latitude,\r\n          montreal,\r\n        ),\r\n        counts: sum(counterData.counts, 'count'),\r\n        ...convertCoordinatesToXY(\r\n          counterData.longitude,\r\n          counterData.latitude,\r\n          projection,\r\n        ),\r\n      };\r\n    });\r\n  });\r\n\r\n  return mapData;\r\n}\r\n\r\n/** Generates data in format for line chart\r\n *\r\n * @param {object} dataset Dataset created by createDataset\r\n * @param montreal Pre-loaded JSON of Montreal data\r\n */\r\nexport function createLineChartData(dataset, montreal) {\r\n  const lineChartData = {};\r\n\r\n  Object.entries(dataset).forEach(([year, yearData]) => {\r\n    lineChartData[year] = {};\r\n    let averageDayCounts;\r\n\r\n    // Sums counts across each day for each counter\r\n    // Also adds neighborhood\r\n    Object.entries(yearData).forEach(([counter, counterData]) => {\r\n      let newCounts = [];\r\n\r\n      // Years 2019-2021 need to group the data by day\r\n      if (counterData.counts.length > 366) {\r\n        newCounts = Object.values(\r\n          groupSum(counterData.counts, 'date', 'count'),\r\n        );\r\n      } else {\r\n        newCounts = counterData.counts.map((data) => data.count);\r\n      }\r\n\r\n      // Save this counter's data to averageDayCounts\r\n      if (!averageDayCounts) {\r\n        averageDayCounts = newCounts;\r\n      } else {\r\n        newCounts.map((count, i) => {\r\n          averageDayCounts[i] += count;\r\n        });\r\n      }\r\n\r\n      lineChartData[year][counter] = {\r\n        name: counter,\r\n        neighborhood: determineNeighborhood(\r\n          counterData.longitude,\r\n          counterData.latitude,\r\n          montreal,\r\n        ),\r\n        counts: newCounts.map((v, i) => {\r\n          return {\r\n            index: i,\r\n            value: v,\r\n          };\r\n        }),\r\n      };\r\n    });\r\n\r\n    const totalCounters = Object.keys(yearData).length;\r\n\r\n    lineChartData[year]['Average'] = {\r\n      name: 'All',\r\n      neighborhood: '',\r\n      counts: averageDayCounts.map((counts, i) => {\r\n        return { index: i, value: Math.round(counts / totalCounters) };\r\n      }),\r\n    };\r\n  });\r\n\r\n  return lineChartData;\r\n}\r\n\r\n/** Generates data in format for area chart\r\n *\r\n * @param {object} dataset Dataset created by createDataset\r\n *\r\n * @returns {object} Data for Area chart\r\n */\r\nexport function createAreaChartData(dataset) {\r\n  const areaChartData = {};\r\n\r\n  Object.entries(dataset).forEach(([year, yearData]) => {\r\n    // Time data not available for years before 2019\r\n    if (parseInt(year) < 2019) {\r\n      return;\r\n    }\r\n\r\n    areaChartData[year] = {};\r\n    let averageTimeCounts;\r\n\r\n    // Sums counts across each day for each counter\r\n    // Also adds neighborhood\r\n    Object.entries(yearData).forEach(([counter, counterData]) => {\r\n      let newCounts = Object.values(\r\n        groupSum(counterData.counts, 'time', 'count'),\r\n      );\r\n\r\n      // Save this counter's data to averageTimeCounts\r\n      if (!averageTimeCounts) {\r\n        averageTimeCounts = newCounts;\r\n      } else {\r\n        newCounts.map((count, i) => {\r\n          averageTimeCounts[i] += count;\r\n        });\r\n      }\r\n\r\n      areaChartData[year][counter] = {\r\n        name: counter,\r\n        counts: newCounts.map((v, i) => {\r\n          return {\r\n            index: i,\r\n            value: v,\r\n          };\r\n        }),\r\n      };\r\n    });\r\n\r\n    const totalCounters = Object.keys(yearData).length;\r\n\r\n    areaChartData[year]['Average'] = {\r\n      name: 'All',\r\n      counts: averageTimeCounts.map((counts, i) => {\r\n        return { index: i, value: Math.round(counts / totalCounters) };\r\n      }),\r\n    };\r\n  });\r\n\r\n  return areaChartData;\r\n}\r\n\r\n/** Generates data in format for bar chart\r\n *\r\n * @param {object} dataset Dataset created by createDataset\r\n */\r\nexport function createBarChartData(dataset) {\r\n  const barChartData = {};\r\n\r\n  Object.entries(dataset).forEach(([year, yearData]) => {\r\n    let allCounts = 0;\r\n\r\n    // Sums counts across entire year for each counter\r\n    Object.entries(yearData).forEach(([counter, counterData]) => {\r\n      const counterSum = {\r\n        year: year,\r\n        counts: sum(counterData.counts, 'count'),\r\n      };\r\n\r\n      allCounts += counterSum.counts;\r\n\r\n      barChartData[counter]\r\n        ? barChartData[counter].push(counterSum)\r\n        : (barChartData[counter] = [counterSum]);\r\n    });\r\n\r\n    // Adds average of all sensors for year for default view\r\n    const average = {\r\n      year: year,\r\n      counts: Math.round(allCounts / Object.keys(yearData).length),\r\n    };\r\n\r\n    barChartData['Average']\r\n      ? barChartData['Average'].push(average)\r\n      : (barChartData['Average'] = [average]);\r\n  });\r\n\r\n  return barChartData;\r\n}\r\n","/**\r\n * Adds SVG groups for the map base, bike paths and circles\r\n *\r\n * @param {number} width The width of the graph\r\n * @param {number} height The height of the graph\r\n */\r\nexport function generateMapGroups(width, height) {\r\n  d3.select('#map-svg')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n    .append('g')\r\n    .attr('id', 'map-base-g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n    .select(function () {\r\n      return this.parentNode;\r\n    })\r\n    .append('g')\r\n    .attr('id', 'map-lanes-g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n    .select(function () {\r\n      return this.parentNode;\r\n    })\r\n    .append('g')\r\n    .attr('id', 'map-circles-g')\r\n    .attr('width', width)\r\n    .attr('height', height);\r\n}\r\n\r\n/**\r\n * Draws the map base of Montreal.\r\n *\r\n * @param {object[]} data The data for the map base\r\n * @param {*} path The path associated with the current projection\r\n */\r\nexport function drawMapBackground(data, path) {\r\n  d3.select('#map-base-g')\r\n    .selectAll('path')\r\n    .data(data)\r\n    .enter()\r\n    .append('path')\r\n    .attr('d', path)\r\n    .attr('fill', '#d8dbe3')\r\n    .attr('stroke', '#ffffff')\r\n    .attr('stroke-width', 1);\r\n}\r\n\r\n/**\r\n * Draws the cycle lanes of Montreal\r\n *\r\n * @param {object[]} data The data for the cycle lanes\r\n * @param {*} path The path associated with the current projection\r\n */\r\nexport function drawBikePaths(data, path) {\r\n  d3.select('#map-lanes-g')\r\n    .selectAll('path')\r\n    .data(data)\r\n    .enter()\r\n    .append('path')\r\n    .attr('d', path)\r\n    .attr('fill', 'rgba(0,0,0,0)')\r\n    .attr('stroke', '#0bb52d')\r\n    .attr('stroke-width', 1.5);\r\n}\r\n\r\nfunction radiusScale(data) {\r\n  const maxCounts = d3.max(data.map((data) => data.counts));\r\n  return d3.scaleLinear().domain([0, maxCounts]).range([4, 10]);\r\n}\r\n\r\n/**\r\n * Draws the counter\r\n *\r\n * @param {object[]} data The data for the map\r\n * @param callback The callback to call on circle click\r\n */\r\nexport function drawCircles(data, callback) {\r\n  const scale = radiusScale(data);\r\n\r\n  d3.select('#map-circles-g').selectAll('circle').remove();\r\n\r\n  d3.select('#map-circles-g')\r\n    .selectAll('circle')\r\n    .data(data)\r\n    .enter()\r\n    .append('circle')\r\n    .attr('class', 'circle')\r\n    .attr('r', (d) => scale(d.counts))\r\n    .attr('cx', (d) => d.x)\r\n    .attr('cy', (d) => d.y)\r\n    .attr('fill', '#0461cc')\r\n    .attr('stroke', '#ffffff')\r\n    .attr('stroke-width', 1)\r\n    .on('click', callback);\r\n}\r\n","/**\r\n * Draws the dropdown menu to select the desired year\r\n *\r\n * @param {number} years The years to display\r\n * @param {number} width The width of the graph, used to place the button\r\n *\r\n * @returns Initial year in dropdown\r\n */\r\nexport function drawDropdown(years) {\r\n  d3.select('#map-div')\r\n    .append('select')\r\n    .attr('id', 'dropdown')\r\n    .attr('width', 130)\r\n    .attr('height', 25)\r\n    .selectAll('myOptions')\r\n    .data(years)\r\n    .enter()\r\n    .append('option')\r\n    .text(function (d) {\r\n      return d;\r\n    })\r\n    .attr('value', function (d) {\r\n      return d;\r\n    });\r\n\r\n  return years[0];\r\n}\r\n","/** Appends a callback to redraw graphs to the year dropdown\r\n *\r\n * @param callback Redraw function to call on click\r\n */\r\nexport function dropDownClickHandler(callback) {\r\n  d3.select('#dropdown').on('change', () => {\r\n    const year = d3.select('#dropdown').property('value');\r\n    console.log(year);\r\n    callback(year);\r\n    // Pass year to drawBarChart, drawMapCircles and drawAreaChart to redraw\r\n    // Rerun drawLineChart with no name specified (default data)\r\n  });\r\n}\r\n\r\n/** To be passed to circles to redraw charts on circle click\r\n *\r\n * @param callback Callback to call on click\r\n */\r\nexport function circleClickHandler(callback) {\r\n  return (d) => {\r\n    const year = d3.select('#dropdown').property('value');\r\n    const name = d.name;\r\n    console.log(name);\r\n    callback(year, name);\r\n    // Pass d.name, d.neighborhood and lineChartData[year][name] to drawLinechart\r\n  };\r\n}\r\n","export function addLineGroup() {\r\n  d3.select('#map-svg').append('g').attr('id', 'line-svg');\r\n}\r\n\r\nfunction addLabels(g, width, height, name, neighborhood) {\r\n  // X label\r\n  g.append('g')\r\n    .append('text')\r\n    .attr('class', 'axis-label')\r\n    .text(\"Jours de l'année\")\r\n    .attr('x', width / 2 + 30)\r\n    .attr('y', height);\r\n  // Y label\r\n  g.append('g')\r\n    .append('text')\r\n    .attr('class', 'axis-label')\r\n    .text('Comptes')\r\n    .attr('x', 10)\r\n    .attr('y', height / 2)\r\n    .attr('transform', 'rotate(-90)');\r\n  // Title\r\n  const title = g\r\n    .append('g')\r\n    .append('text')\r\n    .attr('class', 'graph-title')\r\n    .attr('x', width / 2 + 30)\r\n    .attr('y', 15);\r\n  if (name) {\r\n    title.text(name + ' - ' + neighborhood);\r\n  } else {\r\n    title.text('Moyenne de tous les compteurs');\r\n  }\r\n}\r\n\r\nfunction generateXScale(width, days) {\r\n  return d3.scaleLinear().domain([0, days]).range([0, width]);\r\n}\r\n\r\nfunction generateYScale(height, counts) {\r\n  return d3\r\n    .scaleLinear()\r\n    .domain([0, d3.max(counts)])\r\n    .range([height, 0])\r\n    .nice();\r\n}\r\n\r\nfunction addAxes(g, width, height, yScale) {\r\n  // Create X axis with 24 hr time\r\n  const xAxis = d3\r\n    .axisBottom(\r\n      d3\r\n        .scaleTime()\r\n        .domain([new Date(2000, 0, 0), new Date(2000, 12, 31)])\r\n        .range([0, width])\r\n        .nice(),\r\n    )\r\n    .ticks(6)\r\n    .tickFormat(d3.timeFormat('%B'));\r\n\r\n  // Add axes, pixel-perfect positioning\r\n  g.append('g')\r\n    .attr('class', 'axis')\r\n    .attr('transform', 'translate(59,' + height + ')')\r\n    .call(xAxis);\r\n  g.attr('class', 'axis')\r\n    .append('g')\r\n    .attr('transform', 'translate(59,0)')\r\n    .call(d3.axisLeft(yScale));\r\n}\r\n\r\n/**\r\n * Draws the line chart\r\n *\r\n * @param {object[]} data The data for the map\r\n * @param callback The callback to call on circle click\r\n */\r\nexport function drawLineChart(width, height, averageData, counterData) {\r\n  const svg = d3\r\n    .select('#line-svg')\r\n    .attr('width', width + 80)\r\n    .attr('height', height + 80);\r\n\r\n  // Reset line chart svg\r\n  svg.selectAll('g').remove();\r\n\r\n  // Add labels\r\n  addLabels(\r\n    svg,\r\n    width + 80,\r\n    height + 70,\r\n    counterData && counterData.name,\r\n    counterData && counterData.neighborhood,\r\n  );\r\n\r\n  const outerG = svg\r\n    .append('g')\r\n    .attr('width', width + 30)\r\n    .attr('height', height + 20)\r\n    .attr('transform', 'translate(10, 30)');\r\n\r\n  // Generate scales\r\n  const xScale = generateXScale(width, averageData.counts.length);\r\n  const yScale = generateYScale(height, [\r\n    ...averageData.counts.map((v) => v.value),\r\n    ...(counterData ? counterData.counts.map((v) => v.value) : []),\r\n  ]);\r\n\r\n  // Add axes\r\n  addAxes(outerG, width, height, yScale);\r\n\r\n  const innerG = outerG\r\n    .append('g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n    .attr('transform', 'translate(60, 0)');\r\n\r\n  // Draw chart\r\n  innerG\r\n    .append('path')\r\n    .datum(averageData.counts)\r\n    .attr('fill', 'rgba(0, 0, 0, 0)')\r\n    .attr('stroke', '#9a9a9a')\r\n    .attr('stroke-width', 1)\r\n    .attr(\r\n      'd',\r\n      d3\r\n        .line()\r\n        .x(function (d) {\r\n          return xScale(d.index);\r\n        })\r\n        .y(function (d) {\r\n          return yScale(d.value);\r\n        }),\r\n    );\r\n\r\n  if (counterData) {\r\n    innerG\r\n      .append('path')\r\n      .datum(counterData.counts)\r\n      .attr('fill', 'rgba(0, 0, 0, 0)')\r\n      .attr('stroke', 'rgba(18, 81, 153, 1)')\r\n      .attr('stroke-width', 1)\r\n      .attr(\r\n        'd',\r\n        d3\r\n          .line()\r\n          .x(function (d) {\r\n            return xScale(d.index);\r\n          })\r\n          .y(function (d) {\r\n            return yScale(d.value);\r\n          }),\r\n      );\r\n  }\r\n}\r\n","function addLabels(g, width, height, name) {\r\n  // X label\r\n  g.append('g')\r\n    .append('text')\r\n    .attr('class', 'axis-label')\r\n    .text('Heures de la journée')\r\n    .attr('x', width / 2 + 30)\r\n    .attr('y', height);\r\n  // Y label\r\n  g.append('g')\r\n    .append('text')\r\n    .attr('class', 'axis-label')\r\n    .text('Comptes')\r\n    .attr('x', 10)\r\n    .attr('y', height / 2)\r\n    .attr('transform', 'rotate(-90)');\r\n  // Title\r\n  const title = g\r\n    .append('g')\r\n    .append('text')\r\n    .attr('class', 'graph-title')\r\n    .attr('x', width / 2 + 30)\r\n    .attr('y', 15);\r\n  if (name) {\r\n    title.text('Comptes par heure pour ' + name);\r\n  } else {\r\n    title.text('Moyenne de tous les compteurs');\r\n  }\r\n}\r\n\r\nfunction generateXScale(width) {\r\n  return d3.scaleLinear().domain([0, 96]).range([0, width]);\r\n}\r\n\r\nfunction generateYScale(height, counts) {\r\n  return d3\r\n    .scaleLinear()\r\n    .domain([0, d3.max(counts)])\r\n    .range([height, 0])\r\n    .nice();\r\n}\r\n\r\nfunction addAxes(g, width, height, yScale) {\r\n  // Create X axis with 24 hr time\r\n  const xAxis = d3\r\n    .axisBottom(\r\n      d3\r\n        .scaleTime()\r\n        .range([0, width - 7])\r\n        .nice(),\r\n    )\r\n    .ticks(20)\r\n    .tickFormat(d3.timeFormat('%H:%M'));\r\n\r\n  // Add axes, pixel-perfect positioning\r\n  g.append('g')\r\n    .attr('class', 'axis')\r\n    .attr('transform', 'translate(59,' + height + ')')\r\n    .call(xAxis);\r\n  g.attr('class', 'axis')\r\n    .append('g')\r\n    .attr('transform', 'translate(59,0)')\r\n    .call(d3.axisLeft(yScale));\r\n}\r\n\r\n/**\r\n * Draws the area chart\r\n *\r\n * @param {object[]} data The data for the map\r\n * @param callback The callback to call on circle click\r\n */\r\nexport function drawAreaChart(width, height, averageData, counterData) {\r\n  const svg = d3\r\n    .select('#area-svg')\r\n    .attr('width', width + 80)\r\n    .attr('height', height + 80);\r\n\r\n  // Reset area chart svg\r\n  svg.selectAll('g').remove();\r\n\r\n  // Add labels\r\n  addLabels(svg, width + 80, height + 70, counterData && counterData.name);\r\n\r\n  const outerG = svg\r\n    .append('g')\r\n    .attr('width', width + 30)\r\n    .attr('height', height + 20)\r\n    .attr('transform', 'translate(10, 30)');\r\n\r\n  // Generate scales\r\n  const xScale = generateXScale(width);\r\n  const yScale = generateYScale(height, [\r\n    ...averageData.counts.map((v) => v.value),\r\n    ...(counterData ? counterData.counts.map((v) => v.value) : []),\r\n  ]);\r\n\r\n  // Add axes\r\n  addAxes(outerG, width, height, yScale);\r\n\r\n  const innerG = outerG\r\n    .append('g')\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n    .attr('transform', 'translate(60, 0)');\r\n\r\n  // Draw chart\r\n  innerG\r\n    .append('path')\r\n    .datum(averageData.counts)\r\n    .attr('fill', '#c9c9c9')\r\n    .attr('stroke', '#9a9a9a')\r\n    .attr('stroke-width', 1)\r\n    .attr(\r\n      'd',\r\n      d3\r\n        .area()\r\n        .x(function (d) {\r\n          return xScale(d.index);\r\n        })\r\n        .y0(height)\r\n        .y1(function (d) {\r\n          return yScale(d.value);\r\n        }),\r\n    );\r\n\r\n  if (counterData) {\r\n    innerG\r\n      .append('path')\r\n      .datum(counterData.counts)\r\n      .attr('fill', 'rgba(77, 149, 232, 0.5)')\r\n      .attr('stroke', 'rgba(18, 81, 153, 0.5)')\r\n      .attr('stroke-width', 1)\r\n      .attr(\r\n        'd',\r\n        d3\r\n          .area()\r\n          .x(function (d) {\r\n            return xScale(d.index);\r\n          })\r\n          .y0(height)\r\n          .y1(function (d) {\r\n            return yScale(d.value);\r\n          }),\r\n      );\r\n  }\r\n}\r\n","var pointInPolygonFlat = require('./flat.js')\nvar pointInPolygonNested = require('./nested.js')\n\nmodule.exports = function pointInPolygon (point, vs, start, end) {\n    if (vs.length > 0 && Array.isArray(vs[0])) {\n        return pointInPolygonNested(point, vs, start, end);\n    } else {\n        return pointInPolygonFlat(point, vs, start, end);\n    }\n}\nmodule.exports.nested = pointInPolygonNested\nmodule.exports.flat = pointInPolygonFlat\n","// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n","/**\r\n * Appends SVG g elements which will contain the x and y axes.\r\n *\r\n * @param {*} g The d3 Selection of the graph's g SVG element\r\n */\r\n export function appendAxes (g) {\r\n    g.append('g')\r\n      .attr('class', 'x axis')\r\n  \r\n    g.append('g')\r\n      .attr('class', 'y axis')\r\n  }\r\n  \r\n/**\r\n * Appends the labels for the the y axis and the title of the graph.\r\n *\r\n * @param {*} g The d3 Selection of the graph's g SVG element\r\n */\r\n export function appendGraphLabels (g) {\r\n    g.append('text')\r\n      .text('Total counts for the year')\r\n      .attr('class', 'y axis-text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('fill', '#898989')\r\n      .attr('font-size', 12)\r\n  \r\n    g.append('text')\r\n      .text('Average counts per year')\r\n      .attr('class', 'title')\r\n      .attr('fill', '#898989')\r\n  }\r\n\r\n/**\r\n * Sets the size of the SVG canvas containing the graph.\r\n *\r\n * @param {number} width The desired width\r\n * @param {number} height The desired height\r\n */\r\n export function setCanvasSize (width, height) {\r\n    d3.select('#bar-svg')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n  }\r\n\r\n/**\r\n * Positions the x axis label, y axis label and title label on the graph.\r\n *\r\n * @param {number} width The width of the graph\r\n * @param {number} height The height of the graph\r\n */\r\n export function positionLabels (width, height) {\r\n    d3.select('.y.axis-text')\r\n      .attr('x', -50)\r\n      .attr('y', height / 2)\r\n  \r\n    d3.select('.title')\r\n      .attr('x', width / 2)\r\n      .attr('y', -35)\r\n  }\r\n\r\n/**\r\n * Updates the X scale to be used within each group of the grouped bar chart\r\n *\r\n * @param {*} scale The scale used for the subgroups\r\n * @param {string[]} subGroupBars The bars per subgroup (average on all counters and specific counter)\r\n * @param {*} xScale The graph's encompassing x scale\r\n */\r\n export function updateXSubgroupScale (scale, subGroupBars, xScale) {\r\n    scale\r\n      .domain(subGroupBars)\r\n      .range([0, xScale.bandwidth()])\r\n  }\r\n\r\n/**\r\n * Draws the x axis at the bottom of the plot.\r\n *\r\n * @param {*} xScale The scale to use for the x axis\r\n * @param {number} height The height of the graph\r\n */\r\nexport function drawXAxis (xScale, height) {\r\n    d3.select('.x.axis')\r\n      .attr('transform', 'translate(0, ' + height + ')')\r\n      .call(d3.axisBottom(xScale)\r\n        .tickFormat(x => `year ${x}`))\r\n  }\r\n\r\n/**\r\n * Draws the y axis at the left of the plot.\r\n *\r\n * @param {*} yScale The scale to use for the y axis\r\n */\r\nexport function drawYAxis (yScale) {\r\n    d3.select('.y.axis').call(d3.axisLeft(yScale).ticks(5))\r\n  }\r\n\r\n/**\r\n * Sets the domain and range of the X scale.\r\n *\r\n * @param {*} scale The x scale\r\n * @param {object[]} data The data to be used\r\n * @param {number} width The width of the graph\r\n */\r\n export function updateGroupXScale (scale, data, width) {\r\n    scale.domain(data.Average.year).range([0, width])\r\n  }\r\n  \r\n  /**\r\n   * Sets the domain and range of the Y scale.\r\n   *\r\n   * @param {*} scale The Y scale\r\n   * @param {object[]} data The data to be used\r\n   * @param {number} height The height of the graph\r\n   */\r\n  export function updateYScale (scale, data, height) {\r\n    const max = d3.max(data.Average.counts, m => d3.max(m))\r\n    scale.domain([0, max]).range([height, 0])\r\n  }\r\n  \r\n  /**\r\n   * Creates the groups for the grouped bar chart and appends them to the graph.\r\n   * Each group corresponds to a pair of average/chosen counter values\r\n   *\r\n   * @param {object[]} data The data to be used\r\n   * @param {*} x The graph's x scale\r\n   */\r\n  export function createGroups (data, x) {\r\n    d3.select('#bar-svg')\r\n      .selectAll('.group')\r\n      .data(data)\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'group')\r\n      .attr('transform', data => 'translate(' + x(data.Average.year + ',0)'))\r\n      .attr('x', (data) => x(data.Average.year))\r\n  }\r\n  /**\r\n   * Draws the bars inside the groups\r\n   *\r\n   * @param {*} y The graph's y scale\r\n   * @param {*} xSubgroup The x scale to use to position the rectangles in the groups\r\n   * @param {number} height The height of the graph\r\n   * @param {object[]} data The data to be used\r\n   */\r\n  export function drawBars (y, xSubgroup, height, data) {\r\n    d3.select('#bar-svg')\r\n      .selectAll('.group')\r\n      .selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (data) => xSubgroup(data.Average.year))\r\n      .attr('y', (data) => y(data.Average.counts))\r\n      .attr('width', xSubgroup.bandwidth())\r\n      .attr('height', (data) => height - y(data.Average.counts))\r\n  }\r\n\r\nconst margin = { top: 80, right: 0, bottom: 80, left: 55 }\r\n\r\nlet bounds\r\nlet svgSize\r\nlet graphSize\r\n\r\nconst xScale = d3.scaleBand().padding(0.15)\r\nconst xSubgroupScale = d3.scaleBand().padding([0.015])\r\nconst yScale = d3.scaleLinear()\r\n\r\n/**\r\n     *   This function handles the graph's sizing.\r\n     */\r\n function setSizing () {\r\n    bounds = d3.select('#bar-svg').node().getBoundingClientRect()\r\n\r\n    svgSize = {\r\n      width: bounds.width,\r\n      height: 550\r\n    }\r\n\r\n    graphSize = {\r\n      width: svgSize.width - margin.right - margin.left,\r\n      height: svgSize.height - margin.bottom - margin.top\r\n    }\r\n\r\n    setCanvasSize(svgSize.width, svgSize.height)\r\n  }\r\n\r\n/**\r\n     *   This function builds the graph.\r\n     */\r\n export function buildBarChart (data, g) {\r\n    appendAxes(g)\r\n    appendGraphLabels(g)\r\n    setSizing()\r\n\r\n    var subGroupBars = ['Average', 'X'] // Update according to data input\r\n\r\n    positionLabels(graphSize.width, graphSize.height)\r\n\r\n    updateGroupXScale(xScale, data, graphSize.width)\r\n    updateXSubgroupScale(xSubgroupScale, subGroupBars, xScale)\r\n    updateYScale(yScale, data, graphSize.height)\r\n\r\n    drawXAxis(xScale, graphSize.height)\r\n    drawYAxis(yScale)\r\n\r\n    createGroups(data, xScale)\r\n    drawBars(yScale, xSubgroupScale, subGroupBars, graphSize.height)\r\n  }","import 'regenerator-runtime/runtime.js';\r\nimport {\r\n  createBarChartData,\r\n  createLineChartData,\r\n  createDataset,\r\n  getLocationData,\r\n  getCounterData,\r\n  createAreaChartData,\r\n  createMapData,\r\n} from './scripts/preprocess';\r\nimport {\r\n  generateMapGroups,\r\n  drawMapBackground,\r\n  drawBikePaths,\r\n  drawCircles,\r\n} from './scripts/mapViz';\r\nimport { drawDropdown } from './scripts/dropdown.js';\r\nimport {\r\n  dropDownClickHandler,\r\n  circleClickHandler,\r\n} from './scripts/clickHandlers';\r\nimport {\r\n  getMontrealData,\r\n  getProjection,\r\n  getPath,\r\n  getBikePaths,\r\n} from './scripts/geography';\r\nimport { addLineGroup, drawLineChart } from './scripts/lineChart';\r\nimport { drawAreaChart } from './scripts/areaChart';\r\nimport { buildBarChart } from './scripts/barChartViz.js';\r\n\r\n(async function (d3) {\r\n  const mapsize = {\r\n    width: 800,\r\n    height: 625,\r\n  };\r\n  const areaSize = {\r\n    width: 800,\r\n    height: 350,\r\n  };\r\n  const lineSize = {\r\n    width: 400,\r\n    height: 250,\r\n  };\r\n\r\n  // Get all raw data\r\n  const years = [\r\n    // 2009, 2010,\r\n    // 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,\r\n    2019,\r\n  ];\r\n  const montreal = await getMontrealData();\r\n  const bikePaths = await getBikePaths();\r\n  const locationData = await getLocationData();\r\n  const counterData = await getCounterData(years);\r\n\r\n  // Generate SVG groups\r\n  generateMapGroups(mapsize.width, mapsize.height);\r\n  addLineGroup();\r\n\r\n  // Render map\r\n  const projection = getProjection();\r\n  const path = getPath(projection);\r\n  drawMapBackground(montreal, path);\r\n  drawBikePaths(bikePaths, path);\r\n\r\n  // Get all processed data\r\n  const dataset = createDataset(locationData, counterData, years);\r\n  const mapData = createMapData(dataset, montreal, projection);\r\n  const lineChartData = createLineChartData(dataset, montreal);\r\n  const areaChartData = createAreaChartData(dataset);\r\n  const barChartData = createBarChartData(dataset);\r\n\r\n  // Interactivity and re-drawing\r\n  function redrawVizForCounter(year, counter) {\r\n    // Add barchart, areachart and linechart here\r\n    // Called on counter click\r\n    drawAreaChart(\r\n      areaSize.width,\r\n      areaSize.height,\r\n      areaChartData[year]['Average'],\r\n      areaChartData[year][counter],\r\n    );\r\n    drawLineChart(\r\n      lineSize.width,\r\n      lineSize.height,\r\n      lineChartData[year]['Average'],\r\n      lineChartData[year][counter],\r\n    );\r\n    // buildBarChart(barChartData, '#bar-svg'); WITH COUNTER\r\n  }\r\n  function redrawVizForYear(year) {\r\n    drawCircles(mapData[year], circleClickHandler(redrawVizForCounter));\r\n    drawAreaChart(\r\n      areaSize.width,\r\n      areaSize.height,\r\n      areaChartData[year]['Average'],\r\n    );\r\n    drawLineChart(\r\n      lineSize.width,\r\n      lineSize.height,\r\n      lineChartData[year]['Average'],\r\n    );\r\n    // buildBarChart(barChartData, '#bar-svg'); WITH NO COUNTER\r\n  }\r\n\r\n  const year = drawDropdown(years);\r\n  dropDownClickHandler(redrawVizForYear);\r\n\r\n  // Call draw graphs\r\n  redrawVizForYear(year);\r\n})(d3);\r\n"],"names":["$5a4e08052c16a16d$exports","point","vs","start","end","x","y","inside","undefined","length","len","i","j","xi","yi","xj","yj","async","$ceabff54d7b213d9$export$ebe55e39390500a5","d3","json","$ceabff54d7b213d9$export$3edc714f9fa271c0","$ceabff54d7b213d9$export$df2567d92aff9d24","lon","lat","montreal","returnName","forEach","feature","$parcel$interopDefault","$44f6d5989509de22$exports","geometry","coordinates","properties","NOM","$ceabff54d7b213d9$export$5c12f494957ff255","geoMercator","center","scale","$ceabff54d7b213d9$export$2aa3fd96c49a84a8","projection","geoPath","$ceabff54d7b213d9$export$c4089d80e25ad81e","longitude","latitude","projected","$5cfb72ae602df450$var$sum","a1","key","map","a","reduce","b","c","isNaN","$5cfb72ae602df450$var$groupSum","key2","$5cfb72ae602df450$export$82208cf1aec14b57","years","counterData","Promise","all","year","csv","$5cfb72ae602df450$export$9d0b2837dcb8a0a9","$5cfb72ae602df450$export$dc0eaef47cc3157f","locations","counters","dataset","acceptedCounters","Object","keys","filter","name","counter","find","t","includes","ID","Nom","Longitude","Latitude","counts","timestep","date","time","entries","value","dateTime","split","count","parseInt","push","$5cfb72ae602df450$export$28eade69d8b9e472","mapData","yearData","neighborhood","$5cfb72ae602df450$export$622bbef83119cb4d","lineChartData","averageDayCounts","newCounts","values","data","v","index","totalCounters","Math","round","$5cfb72ae602df450$export$37f1c0e56374e37c","areaChartData","averageTimeCounts","$5cfb72ae602df450$export$850d506dc089a6ee","barChartData","allCounts","counterSum","average","$1e9b62501dbf7c92$export$ebb64f77aca3fccb","width","height","select","attr","append","this","parentNode","$1e9b62501dbf7c92$export$48abbfdd2194ed43","path","selectAll","enter","$1e9b62501dbf7c92$export$62c530ff9ed57277","$1e9b62501dbf7c92$export$e65936cef493d66f","callback","data1","maxCounts","max","scaleLinear","domain","range","$1e9b62501dbf7c92$var$radiusScale","remove","d","on","$d62fe7091d94122e$export$7ab24ddbe2dc5f1a","text","$872c6a00e4259fb1$export$7464dbd85cfc05bf","property","console","log","$872c6a00e4259fb1$export$a7a819994adda4d1","$5549c86fe60bf13a$export$1b8e6d9ad4ab4914","$5549c86fe60bf13a$export$b57f9467d5b39444","averageData","svg","g","title","$5549c86fe60bf13a$var$addLabels","outerG","xScale","days","$5549c86fe60bf13a$var$generateXScale","yScale","nice","$5549c86fe60bf13a$var$generateYScale","xAxis","axisBottom","scaleTime","Date","ticks","tickFormat","timeFormat","call","axisLeft","$5549c86fe60bf13a$var$addAxes","innerG","datum","line","$244c9d65a2076c81$export$6e6b815fe454364d","$244c9d65a2076c81$var$addLabels","$244c9d65a2076c81$var$generateXScale","$244c9d65a2076c81$var$generateYScale","$244c9d65a2076c81$var$addAxes","area","y0","y1","Array","isArray","$4e390afc6e925d05$exports","nested","flat","scaleBand","padding","mapsize","areaSize","lineSize","bikePaths","locationData","redrawVizForCounter","redrawVizForYear","year1"],"version":3,"file":"index.6e9bbed2.js.map"}